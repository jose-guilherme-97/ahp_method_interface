import streamlit as st
import pandas as pd
import uuid
import ahp
from functions_app import DealWithDf

# Inicializando algumas listas para coletar alternativas e crit√©rios
rows_collection_alt = []
rows_collection_cri = []

# Inicializando alguns estatos utilizados no processo de 
if "alternativas" not in st.session_state:
    st.session_state["alternativas"] = []

if "criterios" not in st.session_state:
    st.session_state["criterios"] = []

if 'alternativas_concluidas' not in st.session_state:
    st.session_state.alternativas_concluidas = False

if 'criterios_concluidos' not in st.session_state:
    st.session_state.criterios_concluidos = False

if f"criterio_quali_concluido" not in st.session_state:
    st.session_state[f"criterio_quali_concluido"] = False

if f"criterios_quali_finalizados_por_completo" not in st.session_state:
    st.session_state[f"criterios_quali_finalizados_por_completo"] = False

if f"matriz_julgamento" not in st.session_state:
    st.session_state["matriz_julgamento"] = False

if f"matriz_decisao" not in st.session_state:
    st.session_state["matriz_decisao"] = False

# Concentrando a classe que coordena o acionamento de bot√µes
class Button:
    def __init__(self) -> None:
        pass

    def click_button_alternativas_concluidas(self):
        st.session_state.alternativas_concluidas = True

    def click_button_criterios_concluidos(self):
        st.session_state.criterios_concluidos = True

    def click_button_criterio_quali_concluido(self, id):
        st.session_state[id] = True
    
    def click_button_consistencia_quali(self, id):
        st.session_state[id] = True

    def click_button_criterios_quali_fim(self):
        st.session_state["criterios_quali_finalizados_por_completo"] = True

    def click_button_matriz_julgamento(self):
        st.session_state["matriz_julgamento"] = True

    def click_button_matriz_decisao(self):
        st.session_state["matriz_decisao"] = True

# Classe que coordena o processo de inser√ß√£o de dados pelo tomador de decis√£o
class CollectInfos:
    def __init__(self) -> None:
        pass

    def add_row(self, type):
        """
        Fun√ß√£o que adiciona uma linha para que o usu√°rio possa informar mais um valor

        Args:
            type (str): indica a etapa ao qual deseja-se inserir linhas (alternativas, crit√©rios, etc.)
        
        Return:
            None
        """
        element_id = uuid.uuid4()
        st.session_state[type].append(str(element_id))

    def remove_row(self, row_id, type):
        """
        Fun√ß√£o que remove uma linha

        Args:
            row_id (str, int): indica o id utilizado para a linha que deseja-se excluir
            type (str): indica a etapa ao qual deseja-se inserir linhas (alternativas, crit√©rios, etc.)
        
        Return:
            None
        """
        st.session_state[type].remove(str(row_id))

    def generate_row(self, row_id, type):
        """
        Fun√ß√£o que coordena a apari√ß√£o/exclus√£o de uma linha e capta a informa√ß√£o fornecida pelo usu√°rio

        Args:
            row_id (str, int): indica o id utilizado para a linha trabalhada
            type (str): indica a etapa ao qual deseja-se inserir linhas (alternativas, crit√©rios, etc.)
        
        Return:
            (dict): dicion√°rio contendo as informa√ß√µes coletadas
        """
        if type == "alternativas":
            row_container = st.empty()
            row_columns = row_container.columns((3,1))
            row_name = row_columns[0].text_input("Alternativa", key=f"txt_{row_id}")
            row_columns[1].button("üóëÔ∏è", key=f"del_{row_id}", on_click=self.remove_row, args=[row_id, type])
            return {"name": row_name}
        
        if type == "criterios":
            row_container = st.empty()
            row_columns = row_container.columns((3, 2, 3, 1))
            row_name = row_columns[0].text_input("Criterios", key=f"txt_{row_id}")
            row_type = row_columns[1].selectbox("Tipo", ("quantitativo", "qualitativo"), key=f"tipo_{row_id}")
            row_charac = row_columns[2].selectbox("Caracter√≠stica", ("Quanto maior, melhor", "Quanto maior, pior", "N√£o Aplic√°vel"), key=f"carac_{row_id}")
            row_columns[3].button("üóëÔ∏è", key=f"del_{row_id}", on_click=self.remove_row, args=[row_id, type])
            return {"name": row_name, "tipo": row_type, "caracteristica": row_charac}

        if "criterios_quali" in type:
            row_container = st.empty()
            row_columns = row_container.columns((3,1))
            row_name = row_columns[0].text_input("Valores Qualitativos", key=f"txt_{row_id}")
            row_columns[1].button("üóëÔ∏è", key=f"del_{row_id}", on_click=self.remove_row, args=[row_id, type])
            return {"name": row_name}

# Inicializa√ß√£o das classes importantes a serem utilizadas
botoes = Button()
coordena_coleta = CollectInfos()
df_opps = DealWithDf()

# Constru√ß√£o da visualiza√ß√£o inicial do usu√°rio. Uma tela informando o prop√≥sito, modelo, origem, criador e
# qual a l√≥gica de constru√ß√£o e limita√ß√µes do algoritmo
with st.container():
    st.title("Modelo de apoio √† tomada de decis√£o multicrit√©rios")
    st.subheader("O m√©todo AHP (Analytic Hierarchy Process)")
    menu = st.columns([3,1])
    with menu[0]:
        texto1 = """Desenvolvido na d√©cada de 1970 pelo professor [Thomas Saaty](https://pt.wikipedia.org/wiki/Thomas_Saaty),
             o modelo busca fundamentar escolhas atrav√©s de uma abordagem cient√≠fica, tornando poss√≠vel quantificar e ordenar
             escolhas baseadas em um conjunto de alternativas poss√≠veis (solu√ß√µes) e crit√©rios estabelecidos. Com isso,
             o(s) tomador(es) de decis√£o pode(m), a partir da defini√ß√£o de prioriza√ß√µes e import√¢ncia entre crit√©rios,
             direcionar qual a melhor decis√£o baseando-se nos mesmos."""
        st.write(f'{texto1}')
    with menu[1]:
        st.image("Saaty.jpg",
                  use_column_width=True)
    
    st.subheader("Abordagem do produto")
    texto2 = """Este produto busca trazer de maneira simples e pr√°tica a possibilidade de aplica√ß√£o do
             m√©todo AHP. Para tal, precisamos conhecer os passos a serem seguidos e as caracter√≠sticas
             do modelo."""
    st.write(f'<div style="text-align: justify">{texto2}</div>', unsafe_allow_html=True)
    st.image("fluxo.jpg")
    
    texto3 = """Com isso, ap√≥s definirmos quais as alternativas temos, precisamos pontuar quais os crit√©rios
             adotados na tomada de decis√£o, bem como seu tipo (quantitativo ou qualitativo) e sua caracter√≠stica
             em rela√ß√£o ao neg√≥cio (a varia√ß√£o deste crit√©rio para mais ou para menos √© prejudicial ou ben√©fica para
             sua tomada de decis√£o?). Em seguida, h√° a defini√ß√£o da matriz de julgamento, que √© utilizada (seja olhando
             para uma vari√°vel qualitativa, seja olhando para todos os crit√©rios) para que o tomador de decis√£o possa
             mensurar e dar pesos ao crit√©rio de acordo com sua respectiva import√¢ncia. √Ä medida que o n√∫mero de crit√©rios
             aumenta, a chance de os pesos apontados perderem sentido real aumenta. Para isso, h√° um teste de consist√™ncia, que
             verifica se as pondera√ß√µes realizadas pelo tomador de decis√£o possuem sentido. Os diferentes pesos que podemos atribuir no
             relacionamento entre crit√©rios seguem a escala fundamental de Saaty (imagem ao lado)"""
    st.write(f'<div style="text-align: justify">{texto3}</div>', unsafe_allow_html=True)
   
    st.image("escala_saaty.jpg", use_column_width=True)

    texto4 = """Por fim, vale comentar que o modelo possui a limita√ß√£o de lidar com no m√°ximo 15 crit√©rios. Al√©m disso,
             o n√∫mero de combina√ß√µes na matriz de julgamento aumenta conforme a express√£o:
             """
    st.write(f'<div style="text-align: justify">{texto4}</div>', unsafe_allow_html=True)
    st.write("""
             $$
             \dfrac{n * (n - 1)}{2}
             $$
             Em que n √© o n√∫mero de crit√©rios.""")
# Estrutura dedicada a receber as alternativas de solu√ß√£o do modelo
with st.container():
    st.title("Adi√ß√£o de alternativas")
    for row in st.session_state["alternativas"]:
        row_data = coordena_coleta.generate_row(row, "alternativas")
        rows_collection_alt.append(row_data)

    menu = st.columns(2)

    with menu[0]:
        # Bot√£o que adiciona uma linha para receber mais uma alternativa
        st.button("Add Alternativa", on_click=coordena_coleta.add_row,  args=["alternativas"])
    with menu[1]:
        # Bot√£o que indica que o processo foi finalizado
        st.button("Alternativas - Conclu√≠do", on_click=botoes.click_button_alternativas_concluidas)
    # Apresenta√ß√£o das alternativas coletadas
    if len(rows_collection_alt) > 0:
        st.subheader("Dados coletados - Alternativas")
        display = st.columns(1)
        data_alternativas = pd.DataFrame(rows_collection_alt)
        data_alternativas.rename(columns={"name": "alternativas"}, inplace=True)
        display[0].dataframe(data=data_alternativas, use_container_width=True)

# Estrutura dedicada ao recebimento dos crit√©rios
with st.container():
    if st.session_state.alternativas_concluidas:
        st.title("Adi√ß√£o de crit√©rios")

        for row in st.session_state["criterios"]:
            row_data = coordena_coleta.generate_row(row, "criterios")
            rows_collection_cri.append(row_data)

        menu = st.columns(2)

        with menu[0]:
            # Bot√£o que indica que queremos adicionar mais um crit√©rio para escolha
            st.button("Add Crit√©rio", on_click=coordena_coleta.add_row,  args=["criterios"])
        with menu[1]:
            # Bot√£o que indica que o processo de inser√ß√£o de crit√©rios foi finalizado
            st.button("Crit√©rio - Conclu√≠do", on_click=botoes.click_button_criterios_concluidos)
        # Apresenta√ß√£o dos dados coletados
        if len(rows_collection_cri) > 0:
            st.subheader("Dados coletados - Crit√©rios")
            display = st.columns(1)
            data_criterios = pd.DataFrame(rows_collection_cri)
            data_criterios.rename(columns={"name": "criterios"}, inplace=True)
            data_criterios["caracteristica"] = data_criterios["caracteristica"].apply(lambda x: -1 if x == "Quanto maior, pior" else 1)
            display[0].dataframe(data=data_criterios, use_container_width=True)
            df_criterios_qualitativos = data_criterios[data_criterios["tipo"] == "qualitativo"].copy()

# Estrutura destinada ao tratamento de crit√©rios qualitativos
with st.container():
    if st.session_state.criterios_concluidos:
        if len(df_criterios_qualitativos) > 0:
            st.title("Tratamento de crit√©rios qualitativos")
            # Dicion√°rio destinado a armazenar os pesos resultantes de cada qualidade de cada crit√©rio
            # qualitativo informado
            dict_quali_to_quanti = {}
            # Looping que percorre os crit√©rios qualitativos para constru√ß√£o de sua respectiva
            # matriz de julgamento
            for criterio in df_criterios_qualitativos["criterios"]:
                st.subheader(f"Tratamento do crit√©rio: {criterio}")
                if f"criterios_quali_{criterio}" not in st.session_state:
                    st.session_state[f"criterios_quali_{criterio}"] = []
                
                if f"consistencia_quali_{criterio}" not in st.session_state:
                    st.session_state[f"consistencia_quali_{criterio}"] = False

                row_collection_cri_ql = []
                dict_quali_to_quanti[criterio] = {}
                for row in st.session_state[f"criterios_quali_{criterio}"]:
                    row_data = coordena_coleta.generate_row(row, f"criterios_quali_{criterio}")
                    row_collection_cri_ql.append(row_data)

                menu = st.columns(2)

                with menu[0]:
                    # Bot√£o que indica que queremos adicionar mais um valor para o crit√©rio
                    st.button("Add Valor", on_click=coordena_coleta.add_row,  args=[f"criterios_quali_{criterio}"], key=uuid.uuid4())
                
                with menu[1]:
                    # Valores que indicam que a inser√ß√£o de valores foi conclu√≠da
                    st.button(f"Valores conclu√≠dos para o crit√©rio {criterio}", on_click=botoes.click_button_criterio_quali_concluido,  args=[f"criterio_quali_concluido"], key=uuid.uuid4())
                
                if len(row_collection_cri_ql) > 0:
                    valores = [valor["name"] for valor in row_collection_cri_ql]
                    data_criterios_ql = df_opps.create_dataframe_from_list(valores)
                    st.subheader(f"Dados coletados - crit√©rio: {criterio}")
                    display = st.columns(1)
                    # Cria√ß√£o da matriz de julgamento para o(s) crit√©rio(s) qualitativo(s)
                    if st.session_state[f"criterio_quali_concluido"]:
                        data_criterios_ql_final = df_opps.create_judgement_table(data_criterios_ql, criterio)
                        display[0].dataframe(data=data_criterios_ql_final, use_container_width=True)
                        matrix_judge = data_criterios_ql_final.values
                        mj = ahp.MatrizJulgamento()
                        vetor_prioridade_criterio = mj.normalizacao_julgamentos(matrix_judge)
                        botao_consistencia = st.columns(1)
                        with botao_consistencia[0]:
                            # Bot√£o que solicita a checagem de consist√™ncia para o crit√©rio em quest√£o
                            st.button(f"Verificar consist√™ncia para o crit√©rio {criterio}", on_click=botoes.click_button_consistencia_quali,  args=[f"consistencia_quali_{criterio}"], key=uuid.uuid4())
                        if st.session_state[f"consistencia_quali_{criterio}"]:
                            cr_criterio = mj.analise_consistencia(matrix_judge, vetor_prioridade_criterio)
                            if cr_criterio > 10:
                                message = f"""O teste de consist√™ncia da matriz de julgamento reprovou as prioridades definidas.\n
                                            O resultando da raz√£o de consist√™ncia deve ser menor que 10%. O valor encontrado foi
                                            {cr_criterio}"""
                                raise ValueError(message)
                            else:
                                st.write(f"Pesos atribu√≠dos aprovados para o crit√©rio {criterio}")
                        for i in range(len(valores)):
                            dict_quali_to_quanti[criterio][valores[i]] = vetor_prioridade_criterio[i][0]
            menu_final = st.columns(1)
            with menu_final[0]:
                # Bot√£o que indica que o processo para crit√©rios qualitativos foi encerrado
                st.button("Tratamento encerrado para crit√©rios qualitativos", on_click=botoes.click_button_criterios_quali_fim, key=uuid.uuid4())

# Estrutura dedicada a construir a matriz de julgamento do processo (considerando todos os crit√©rios)
with st.container():
    if st.session_state["criterios_quali_finalizados_por_completo"] or (st.session_state.criterios_concluidos and len(df_criterios_qualitativos) == 0):
        if len(rows_collection_cri) > 0:
            valores = [valor["name"] for valor in rows_collection_cri]
            df_criterios_mapeados = df_opps.create_dataframe_from_list(valores)
            st.subheader("Dados coletados - Matriz de Julgamento")
            display = st.columns(1)
            df_julgamento = df_opps.create_judgement_table(df_criterios_mapeados, "criterio")
            display[0].dataframe(data=df_julgamento, use_container_width=True)
            matriz_julgamento = df_julgamento.values
            menu_final = st.columns(1)
            with menu_final[0]:
                # Bot√£o que indica a finaliza√ß√£o da matriz de julgamento
                st.button("Matriz de Julgamento Finalizada", on_click=botoes.click_button_matriz_julgamento, key=uuid.uuid4())

# Estrutura dedicada a construir a matriz de decis√£o
with st.container():
    if st.session_state["matriz_julgamento"]:
        if st.session_state["criterios_quali_finalizados_por_completo"]:
            df_decisao = df_opps.create_decision_table(data_alternativas, data_criterios, True, dict_quali_to_quanti)
        else:
            df_decisao = df_opps.create_decision_table(data_alternativas, data_criterios, False)

        st.subheader("Dados coletados - Matriz de Decis√£o")
        display = st.columns(1)
        display[0].dataframe(data=df_decisao, use_container_width=True)
        matriz_decisao = df_decisao.values
        menu_final = st.columns(1)
        with menu_final[0]:
            # Bot√£o que indica a finaliza√ß√£o da matriz de decis√£o
            st.button("Matriz de Decis√£o Finalizada", on_click=botoes.click_button_matriz_decisao, key=uuid.uuid4())

# Estrutura dedicada a execu√ß√£o do algoritmo e apresenta√ß√£o de resultados
with st.container():
    if st.session_state["matriz_decisao"]:
        lista_referencia = list(data_criterios["caracteristica"])
        process = ahp.AHP(matriz_julgamento = matriz_julgamento, matriz_decisao = matriz_decisao, lista_referencia_monotomica = lista_referencia)
        result = process.executa_algoritmo()
        df_results = data_alternativas.copy()
        df_results["resultados"] = result.flatten()
        max = df_results["resultados"].max()
        min = df_results["resultados"].min()
        st.subheader("Resultados - Verde (melhor escolha), Amarelo (valores intermedi√°rios), Vermelho (pior escolha)")
        display = st.columns(1)
        display[0].dataframe(df_results.style.apply(lambda x: df_opps.color_coding(row = x, max = max, min = min), axis=1))
